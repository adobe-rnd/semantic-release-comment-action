/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
import core from '@actions/core';
import github from '@actions/github';
import { analyzeCommits } from '@semantic-release/commit-analyzer';

const COMMENT_MARKER = '<!-- generated by: semantic-release-comment-action -->';

async function run() {
  // Get client and context
  const githubToken = core.getInput('GITHUB_TOKEN', {required: true});
  const octokit = github.getOctokit(githubToken);
  const { payload, ref }  = github.context;

  // console.log(`The event payload: ${JSON.stringify(payload, undefined, 2)}`);

  // check if to skip commit
  const skip = payload.commits.find((ci) => (ci.message.indexOf('[skip action]') >= 0));
  if (skip) {
    console.log(`skipping due to issue comment: ${skip.message}`);
    return;
  }

  const owner = payload.repository.owner.name;
  const repo = payload.repository.name;
  const head = owner + ':' + ref.replace('refs/heads/', '');

  console.log('Getting pulls for', owner, repo, head);

  const pulls = await octokit.rest.pulls.list({
    owner,
    repo,
    head,
    state: 'open'
  });

  const [ pull ] = pulls.data;

  if (pull) {
    console.log(`This belongs to PR #${pull.number}. Getting comments.`);

    const comments = await octokit.rest.issues.listComments({
      owner,
      repo,
      issue_number: pull.number
    });

    const commits = await octokit.rest.pulls.listCommits({
      owner,
      repo,
      pull_number: pull.number
    });

    const pluginConfig = {
      // preset: 'angular',
      releaseRules: [{breaking: true, release: 'major'},
      {revert: true, release: 'patch'},
      // Angular
      {type: 'feat', release: 'minor'},
      {type: 'fix', release: 'patch'},
      {type: 'perf', release: 'patch'},]
    };
    const context = {
      commits: commits.data.map(commit => commit.commit),
      logger: console
    };
    const releaseType = await analyzeCommits(pluginConfig, context);

    // create comment body
    const lines = [ COMMENT_MARKER ];
        if (releaseType) {
      lines.push(`This PR will trigger **a ${releaseType} release** when merged.`);
    } else {
      lines.push('This PR will trigger **no release** when merged.');
    }
    const body = lines.join('\n');
    console.log(`----------\n${body}\n----------`);

    /// reuse exiting comment if present
    const existing = comments.data.find(comment => comment.body.indexOf(COMMENT_MARKER) >= 0);

    if (existing) {
      console.log('Updating existing comment', existing.id);
      octokit.rest.issues.updateComment({
        owner,
        repo,
        issue_number: pull.number,
        comment_id: existing.id,
        body
      })
    } else {
      console.log('Creating a new comment');
      octokit.rest.issues.createComment({
        owner,
        repo,
        issue_number: pull.number,
        body
      });
    }
  }
}

run().catch((error) => {
  console.error(error);
  core.setFailed(error.message);
});
